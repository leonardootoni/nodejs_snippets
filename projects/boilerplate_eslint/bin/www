#!/usr/bin/env node

/** Module dependencies. */
const http = require('http');
const app = require('../app');
const appConstants = require('../config/app-constants');
const { processLogger } = require('../config/logger');

const logger = processLogger;

/** Create HTTP server. */
const server = http.createServer(app);
/** Get port from environment and store in Express. */
const port = appConstants.SERVER_PORT;

/**
 * Event listener for HTTP server "error" event.
 * @param {object} error - Error description
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.fatal(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.fatal(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/** Event listener for HTTP server "listening" event. */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  logger.info('Server started...');
  logger.info(`Listening on ${server.address().address} ${bind}`);
}

/** Listen on provided port, on all network interfaces. */
app.set('port', port);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
// Prevents the program from closing instantly
process.stdin.resume();
